// Generated by gencpp from file motctrl_can/speed_controlRequest.msg
// DO NOT EDIT!


#ifndef MOTCTRL_CAN_MESSAGE_SPEED_CONTROLREQUEST_H
#define MOTCTRL_CAN_MESSAGE_SPEED_CONTROLREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motctrl_can
{
template <class ContainerAllocator>
struct speed_controlRequest_
{
  typedef speed_controlRequest_<ContainerAllocator> Type;

  speed_controlRequest_()
    : speed(0.0)
    , duration(0)  {
    }
  speed_controlRequest_(const ContainerAllocator& _alloc)
    : speed(0.0)
    , duration(0)  {
  (void)_alloc;
    }



   typedef float _speed_type;
  _speed_type speed;

   typedef uint32_t _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::motctrl_can::speed_controlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motctrl_can::speed_controlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct speed_controlRequest_

typedef ::motctrl_can::speed_controlRequest_<std::allocator<void> > speed_controlRequest;

typedef boost::shared_ptr< ::motctrl_can::speed_controlRequest > speed_controlRequestPtr;
typedef boost::shared_ptr< ::motctrl_can::speed_controlRequest const> speed_controlRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motctrl_can::speed_controlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motctrl_can::speed_controlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motctrl_can::speed_controlRequest_<ContainerAllocator1> & lhs, const ::motctrl_can::speed_controlRequest_<ContainerAllocator2> & rhs)
{
  return lhs.speed == rhs.speed &&
    lhs.duration == rhs.duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motctrl_can::speed_controlRequest_<ContainerAllocator1> & lhs, const ::motctrl_can::speed_controlRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motctrl_can

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::motctrl_can::speed_controlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motctrl_can::speed_controlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motctrl_can::speed_controlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motctrl_can::speed_controlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motctrl_can::speed_controlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motctrl_can::speed_controlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motctrl_can::speed_controlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e33e372c4ae0637bc40c64a4e8bbe2d";
  }

  static const char* value(const ::motctrl_can::speed_controlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e33e372c4ae0637ULL;
  static const uint64_t static_value2 = 0xbc40c64a4e8bbe2dULL;
};

template<class ContainerAllocator>
struct DataType< ::motctrl_can::speed_controlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motctrl_can/speed_controlRequest";
  }

  static const char* value(const ::motctrl_can::speed_controlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motctrl_can::speed_controlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 speed\n"
"uint32 duration\n"
;
  }

  static const char* value(const ::motctrl_can::speed_controlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motctrl_can::speed_controlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct speed_controlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motctrl_can::speed_controlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motctrl_can::speed_controlRequest_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "duration: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTCTRL_CAN_MESSAGE_SPEED_CONTROLREQUEST_H
