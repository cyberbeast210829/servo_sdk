// Generated by gencpp from file motctrl_can/get_versionResponse.msg
// DO NOT EDIT!


#ifndef MOTCTRL_CAN_MESSAGE_GET_VERSIONRESPONSE_H
#define MOTCTRL_CAN_MESSAGE_GET_VERSIONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motctrl_can
{
template <class ContainerAllocator>
struct get_versionResponse_
{
  typedef get_versionResponse_<ContainerAllocator> Type;

  get_versionResponse_()
    : res(0)
    , version(0)  {
    }
  get_versionResponse_(const ContainerAllocator& _alloc)
    : res(0)
    , version(0)  {
  (void)_alloc;
    }



   typedef uint8_t _res_type;
  _res_type res;

   typedef uint32_t _version_type;
  _version_type version;





  typedef boost::shared_ptr< ::motctrl_can::get_versionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motctrl_can::get_versionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct get_versionResponse_

typedef ::motctrl_can::get_versionResponse_<std::allocator<void> > get_versionResponse;

typedef boost::shared_ptr< ::motctrl_can::get_versionResponse > get_versionResponsePtr;
typedef boost::shared_ptr< ::motctrl_can::get_versionResponse const> get_versionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motctrl_can::get_versionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motctrl_can::get_versionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motctrl_can::get_versionResponse_<ContainerAllocator1> & lhs, const ::motctrl_can::get_versionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.res == rhs.res &&
    lhs.version == rhs.version;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motctrl_can::get_versionResponse_<ContainerAllocator1> & lhs, const ::motctrl_can::get_versionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motctrl_can

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::motctrl_can::get_versionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motctrl_can::get_versionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motctrl_can::get_versionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motctrl_can::get_versionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motctrl_can::get_versionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motctrl_can::get_versionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motctrl_can::get_versionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df387e88f4e0b3094421061b0dcdbc29";
  }

  static const char* value(const ::motctrl_can::get_versionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf387e88f4e0b309ULL;
  static const uint64_t static_value2 = 0x4421061b0dcdbc29ULL;
};

template<class ContainerAllocator>
struct DataType< ::motctrl_can::get_versionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motctrl_can/get_versionResponse";
  }

  static const char* value(const ::motctrl_can::get_versionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motctrl_can::get_versionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 res\n"
"uint32 version\n"
;
  }

  static const char* value(const ::motctrl_can::get_versionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motctrl_can::get_versionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.res);
      stream.next(m.version);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct get_versionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motctrl_can::get_versionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motctrl_can::get_versionResponse_<ContainerAllocator>& v)
  {
    s << indent << "res: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.res);
    s << indent << "version: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.version);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTCTRL_CAN_MESSAGE_GET_VERSIONRESPONSE_H
