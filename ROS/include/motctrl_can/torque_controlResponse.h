// Generated by gencpp from file motctrl_can/torque_controlResponse.msg
// DO NOT EDIT!


#ifndef MOTCTRL_CAN_MESSAGE_TORQUE_CONTROLRESPONSE_H
#define MOTCTRL_CAN_MESSAGE_TORQUE_CONTROLRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motctrl_can
{
template <class ContainerAllocator>
struct torque_controlResponse_
{
  typedef torque_controlResponse_<ContainerAllocator> Type;

  torque_controlResponse_()
    : res(0)
    , temp(0)
    , position(0.0)
    , speed(0.0)
    , torque(0.0)  {
    }
  torque_controlResponse_(const ContainerAllocator& _alloc)
    : res(0)
    , temp(0)
    , position(0.0)
    , speed(0.0)
    , torque(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _res_type;
  _res_type res;

   typedef int8_t _temp_type;
  _temp_type temp;

   typedef float _position_type;
  _position_type position;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _torque_type;
  _torque_type torque;





  typedef boost::shared_ptr< ::motctrl_can::torque_controlResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motctrl_can::torque_controlResponse_<ContainerAllocator> const> ConstPtr;

}; // struct torque_controlResponse_

typedef ::motctrl_can::torque_controlResponse_<std::allocator<void> > torque_controlResponse;

typedef boost::shared_ptr< ::motctrl_can::torque_controlResponse > torque_controlResponsePtr;
typedef boost::shared_ptr< ::motctrl_can::torque_controlResponse const> torque_controlResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motctrl_can::torque_controlResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motctrl_can::torque_controlResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motctrl_can::torque_controlResponse_<ContainerAllocator1> & lhs, const ::motctrl_can::torque_controlResponse_<ContainerAllocator2> & rhs)
{
  return lhs.res == rhs.res &&
    lhs.temp == rhs.temp &&
    lhs.position == rhs.position &&
    lhs.speed == rhs.speed &&
    lhs.torque == rhs.torque;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motctrl_can::torque_controlResponse_<ContainerAllocator1> & lhs, const ::motctrl_can::torque_controlResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motctrl_can

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::motctrl_can::torque_controlResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motctrl_can::torque_controlResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motctrl_can::torque_controlResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motctrl_can::torque_controlResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motctrl_can::torque_controlResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motctrl_can::torque_controlResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motctrl_can::torque_controlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d05a31e6032e17f2dd04fa1e1b893004";
  }

  static const char* value(const ::motctrl_can::torque_controlResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd05a31e6032e17f2ULL;
  static const uint64_t static_value2 = 0xdd04fa1e1b893004ULL;
};

template<class ContainerAllocator>
struct DataType< ::motctrl_can::torque_controlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motctrl_can/torque_controlResponse";
  }

  static const char* value(const ::motctrl_can::torque_controlResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motctrl_can::torque_controlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 res\n"
"int8 temp\n"
"float32 position\n"
"float32 speed\n"
"float32 torque\n"
;
  }

  static const char* value(const ::motctrl_can::torque_controlResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motctrl_can::torque_controlResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.res);
      stream.next(m.temp);
      stream.next(m.position);
      stream.next(m.speed);
      stream.next(m.torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct torque_controlResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motctrl_can::torque_controlResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motctrl_can::torque_controlResponse_<ContainerAllocator>& v)
  {
    s << indent << "res: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.res);
    s << indent << "temp: ";
    Printer<int8_t>::stream(s, indent + "  ", v.temp);
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "torque: ";
    Printer<float>::stream(s, indent + "  ", v.torque);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTCTRL_CAN_MESSAGE_TORQUE_CONTROLRESPONSE_H
