// Generated by gencpp from file motctrl_can/retrieve_parameterRequest.msg
// DO NOT EDIT!


#ifndef MOTCTRL_CAN_MESSAGE_RETRIEVE_PARAMETERREQUEST_H
#define MOTCTRL_CAN_MESSAGE_RETRIEVE_PARAMETERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motctrl_can
{
template <class ContainerAllocator>
struct retrieve_parameterRequest_
{
  typedef retrieve_parameterRequest_<ContainerAllocator> Type;

  retrieve_parameterRequest_()
    : paraID(0)  {
    }
  retrieve_parameterRequest_(const ContainerAllocator& _alloc)
    : paraID(0)  {
  (void)_alloc;
    }



   typedef uint8_t _paraID_type;
  _paraID_type paraID;





  typedef boost::shared_ptr< ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator> const> ConstPtr;

}; // struct retrieve_parameterRequest_

typedef ::motctrl_can::retrieve_parameterRequest_<std::allocator<void> > retrieve_parameterRequest;

typedef boost::shared_ptr< ::motctrl_can::retrieve_parameterRequest > retrieve_parameterRequestPtr;
typedef boost::shared_ptr< ::motctrl_can::retrieve_parameterRequest const> retrieve_parameterRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator1> & lhs, const ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator2> & rhs)
{
  return lhs.paraID == rhs.paraID;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator1> & lhs, const ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motctrl_can

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cdbc2f9a2af047e554ee70238057b8ac";
  }

  static const char* value(const ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcdbc2f9a2af047e5ULL;
  static const uint64_t static_value2 = 0x54ee70238057b8acULL;
};

template<class ContainerAllocator>
struct DataType< ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motctrl_can/retrieve_parameterRequest";
  }

  static const char* value(const ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 paraID\n"
;
  }

  static const char* value(const ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.paraID);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct retrieve_parameterRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motctrl_can::retrieve_parameterRequest_<ContainerAllocator>& v)
  {
    s << indent << "paraID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraID);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTCTRL_CAN_MESSAGE_RETRIEVE_PARAMETERREQUEST_H
